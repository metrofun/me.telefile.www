// We don't care about return value
@noop: `(function(){
    this.quantity = 13;

    this.colors = ['@{white}', '#8987B3', '#FDDA2A', '#09F0F0', '#00B5A8'];
    this.takenPositions = {};

    this.isOverlapping = function(frame, pos) {
        var minDistanceSqr = 100 * 100 / this.quantity / 3;

        return this.takenPositions[frame].some(function(takenPos) {
            return (Math.pow(takenPos.top - pos.top, 2)
                + Math.pow(takenPos.left - pos.left, 2)) < minDistanceSqr;
        });
    }

    this.getRandomColor = function() {
        var idx = Math.floor(Math.random() * 5);

        return this.colors[idx];
    }

    this.getRandomPosition = function(frame) {
        var pos = {}, counter = 0;

        if (!this.takenPositions[frame]) {
            this.takenPositions[frame] = [];
        }

        do {
            counter++;
            pos.top = Math.floor(Math.random() * 100);
            pos.left = Math.floor(Math.random() * 100);
        } while (this.isOverlapping(frame, pos) && (counter < 1000));

        this.takenPositions[frame].push(pos);

        return {
            top: pos.top + '%',
            left: pos.left + '%'
        };
    }

    return '';
})()`;

.particles {
    z-index: -1;
    @media screen and (orientation:landscape) {
        width: 10rem;
        height: 7rem;
    }

    @media screen and (orientation:portrait) {
        width: 30vw;
        height: 10vh;
    }

    position: relative;
    /* animation: fade-in 0.5s @ease-in-out 0s 1 alternate both; */
    /* opacity: 0; */

    &__item {
        width: 100%;
        height: 100%;
        position: absolute;

        @media screen and (orientation:landscape) {
            clip: rect(0, 1rem, 1rem, 0);
            top: -0.5rem;
            left: -0.5rem;
        }

        @media screen and (orientation:portrait) {
            clip: rect(0, 1.3vh, 1.3vh, 0);
            top: -1.3vh;
            left: -1.3vh;
        }
    }

    // initial animation
    .generate-items(6, 13, ~"0.6s step-start 0s 1 normal both");

    &_animated_yes.particles {
        .generate-items(20, 6, ~"3s step-start 0s infinite normal both");

        .particles__item {
            opacity: 0;
        }
    }
}

@keyframes fade-in {
    from {opacity: 0}
    to {opacity: 1}
}

.generate-items(@steps, @items, @animation, @i: 1) when (@i <= @items) {
    @noop: `(function() {
        return this.animationName = 'item-animate-' + Math.random().toString(36).substr(2);
    })()`;
    /* We cant assign directly to @animation-name, */
    /* because it would be lazy eveluated each time */
    /* and return different values in the same scope */
    @animation-name: ~`(function() {
        return this.animationName;
    })()`;

    .particles__item:nth-child(@{i}) {
        animation: @animation-name @animation;
        opacity: 1;
    }

    @keyframes @animation-name {
        .generate-frames(@steps);
    }

    .generate-items(@steps, @items, @animation, (@i + 1));
}

.generate-frames (@steps, @i: 1) when (@i <= @steps) {
    @selector: 100% * @i / @steps;

    @{selector} {
        // We don't care about return value
        @noop: ~`(function() {
            return this.position = this.getRandomPosition(@{i});
        })()`;
        @top: ~`(function() {return this.position.top; })()`;
        @left: ~`(function() {return this.position.left; })()`;
        transform: translate(@left, @top);
        background: ~`(function() {
            return this.getRandomColor();
        })()`;
    }

    .generate-frames(@steps, (@i + 1));
}
